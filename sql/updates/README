= MaNGOS -- README =

Copyright (c) 2005-2010 MaNGOS <http://getmangos.com/>

See the COPYING file for copying conditions.

NOTE: This is file special addition for mangos-0.12 branch
      It describe work with backported sql updates

== Database Updates ==

This folder contains SQL files which will apply required updates to your MySQL
database, whenever the MaNGOS database structure has been changed or extended.

To see if you need an update, the file names have been given a fixed structure
that should enable you to see if you need an update or not.

=== File Name Description ===

File names are divided into two parts.

First part is the order_number, revision and counter that shows the commit revision that
will be compatible with the database after apply that particular update.
Counter sets the order to apply sql updates for the same revision. Order_number set
global order in directory for backported sql updates (its backported in random order
and need special mangos-0.12 side order for apply).

The second part of the name is the database and the table that needs an update or has been added.

See an example below:

         041_7932_01_characters_character_pet.sql
         |   |    |  |          |
         |   |    |  |          |
         |   |    |  |          The table `character_pet`
         |   |    |  |          will need an update.
         |   |    |  |
         |   |    |  Name of affected DB (default recommended name)
         |   |    |  Can be: characters, mangos, realmd
         |   |    |
         |   |    Counter show number of sql updates in master updates list for provided master revision
         |   |    and set proper order for sql updates for same revision
         |   |
         |   MaNGOS master commit revision related to sql update.
         |   It included in commit description in form [7059] as you can see at http://github.com/mangos/mangos/commits/master
         |   It can be absent (and replaced by ____) if sql update not really backported but only mangos-0.12 specific.
         |
         Order_number set special order for apply sql updates from different backported revisions in mangos-0.12 branch


After applying an update the DB is compatible with the mangos revision of this sql update.
SQL updates include special protection against multiple and wrong order of update application.

Attempts to apply sql updates to an older DB without previous SQL updates in list for the database
or to DB with already applied this or later SQL update will generate an error and not be applied.

=== What do for upgrade to MaNGOS 0.13 ====

MaNGOS 0.12 DB structure can have changes not compatibale with sql updates in MaNGOS 0.13 sql/updates directory.
For resolve this problem you need compatible DB content for tables in mangos.sql and realmd, and apply all sql updates from
sql/updates/before_upgrade_to_0.13 in REVERSED order from high order number prefix to low for characters DB.
After this you will have DB structure compatiable with state that exist at moment.
MaNGOS 0.12 release and then sql updates from MaNGOS 0.13 sql/updates directory will applied without problem in normal order
(for charcters DBs) starting from MaNGOS 0.13 sql/updates/2008_12_22_02_characters_character_pet.sql)

=== For Commiters ====

IMPORTANT: Need use git_id tool from mangos-0.12 branch.

===== For backporting sql updates =====

1. Rename sql update from master form (7932_01_characters_character_pet.sql) to mangos-0.12 form (s9999_7932_01_characters_character_pet.sql)
   using any free order_number in sql/updates files list (it will replaced by proper at git_id -s use).

   If this realmd sql update preserve existed mangos master sql guards, and do next step with this goal.

2. You can ignore sql order guards in sql update file. It will fixed at git_id -s use.
   You can ignore content and changes/conflicts in sql/update/Makefile.am. It will regenerated at git_id -s use.
   For make possible test code part build you can resolve revision_sql.h conflicts in any way.
   Work test better do after apply git_id -s to comit when revision_sql.h will regenerated.
   You also need resolve conflicts in DB sql file before git_id tool use (used revison in DB version not important and will replaced by git_id -s)

3. Now use git_id -s

4. If this sql updates for characters DB write undo sql update for sql/updates/before_upgrade_to_0.13 directory.
   This part better go after commit creating and apply git_id -s to it. Described new fiels and chnages need --ammend to created commit.
4.1: Name it in same way as added sql update (s0041_7932_01_characters_character_pet.sql)
4.2: Use REVERSED order for guard query field names
     (ALTER TABLE character_db_version CHANGE COLUMN required_s0041_7903_01_characters_character_pet required_s0032_7059_02_characters_pet_spell bit;)
4.3: Write required sql queries that will restore DB structure to state _before_ related sql update apply
     (if field added then field drop, if field drop then field re-added with some useful value,
     if field renamed then field renamed back, etc)
4.4: Add undo sql update file name into slq/updates/before_upgrade_to_0.13/Makefile.am

===== For new sql updates =====

1. Name sql update in mangos-0.12 form (s99999_xxxxx_01_characters_character_pet.sql)
   using any free order_number in sql/updates files list (it will replaced by proper at git_id -s use).

2. Add sql update to commit and manually include sql update changes in to related DB sql file.

3. Now use git_id -s (sql update revison will updates in name, sql guards will added to sql update,
   required revision data will update in related DB sql file and in revision_sql.h)
